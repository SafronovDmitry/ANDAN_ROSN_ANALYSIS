{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 417,
   "id": "2023397c",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture\n",
    "!pip install apimoex\n",
    "!pip install requests pandas\n",
    "!pip install requests beautifulsoup4\n",
    "!pip install mpl_finance\n",
    "!pip install mplfinance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 418,
   "id": "6d6531c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from scipy.stats import norm\n",
    "import scipy.stats as sts\n",
    "from mpl_finance import candlestick_ohlc \n",
    "import matplotlib.dates as mpl_dates \n",
    "import mpl_finance\n",
    "from sklearn import preprocessing\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import r2_score\n",
    "from typing import Iterable, List\n",
    "from sklearn.metrics import mean_squared_error\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.linear_model import Lasso, Ridge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 722,
   "id": "18cb573a",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_ROSN = pd.read_csv('ROSN_after_EDA.csv')  \n",
    "df_SBER = pd.read_csv('SBER_after_EDA.csv')  \n",
    "df_LKOH = pd.read_csv('LKOH_after_EDA.csv')  \n",
    "df_SI = pd.read_csv('SI_after_EDA.csv')  \n",
    "df_BR = pd.read_csv('BR_after_EDA.csv')  \n",
    "df_IMOEX = pd.read_csv('IMOEX_after_EDA.csv')  \n",
    "df_STOCK_AGGREGATE = pd.read_csv('df_STOCK_AGGREGATE.csv')  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 723,
   "id": "a1a3ed39",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_ROSN_Train = pd.read_csv('ROSN_after_EDA_Last_months.csv')  \n",
    "df_SBER_Train = pd.read_csv('SBER_after_EDA_Last_months.csv')  \n",
    "df_LKOH_Train = pd.read_csv('LKOH_after_EDA_Last_months.csv')  \n",
    "df_SI_Train = pd.read_csv('SI_after_EDA_Last_months.csv')  \n",
    "df_BR_Train = pd.read_csv('BR_after_EDA_Last_months.csv')  \n",
    "df_IMOEX_Train = pd.read_csv('IMOEX_after_EDA_Last_months.csv')  \n",
    "df_STOCK_AGGREGATE_Train = pd.read_csv('df_STOCK_AGGREGATE_Last_months.csv')  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 724,
   "id": "591668e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_IMOEX_Train.set_index('TRADEDATE', inplace=True)\n",
    "df_STOCK_AGGREGATE_Train.set_index('TRADEDATE', inplace=True)\n",
    "df_BR_Train.set_index('TRADEDATE', inplace=True)\n",
    "df_SI_Train.set_index('TRADEDATE', inplace=True)\n",
    "df_ROSN_Train.set_index('TRADEDATE', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 725,
   "id": "b355ed22",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_ROSN_Train.drop(['Unnamed: 0', 'ADMITTEDQUOTE', 'ADMITTEDVALUE'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 726,
   "id": "0330856c",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_IMOEX.set_index('TRADEDATE', inplace=True)\n",
    "df_STOCK_AGGREGATE.set_index('TRADEDATE', inplace=True)\n",
    "df_BR.set_index('TRADEDATE', inplace=True)\n",
    "df_SI.set_index('TRADEDATE', inplace=True)\n",
    "df_ROSN.set_index('TRADEDATE', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 727,
   "id": "12750a8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_ROSN.drop(['Unnamed: 0', 'ADMITTEDQUOTE', 'ADMITTEDVALUE'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad8ba0f1",
   "metadata": {},
   "source": [
    "# **Машинное обучение**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ecfa0b4",
   "metadata": {},
   "source": [
    "## Прогнозирование среднной цены акций компании Росснефть за торговую сессию"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d762934",
   "metadata": {},
   "source": [
    "Будем работать лишь с датасетом BR_ROSN. В качестве дополнительных признаков добавим туда информацию об индексе мосбиржи за соответствующие даты информацию о стоимости фьючерсов на нефть и рубль доллар за соответствующий день"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 728,
   "id": "5f3ca9f9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>BOARDID</th>\n",
       "      <th>SECID</th>\n",
       "      <th>NUMTRADES</th>\n",
       "      <th>VALUE</th>\n",
       "      <th>OPEN</th>\n",
       "      <th>LOW</th>\n",
       "      <th>HIGH</th>\n",
       "      <th>WAPRICE</th>\n",
       "      <th>CLOSE</th>\n",
       "      <th>VOLUME</th>\n",
       "      <th>TRENDCLSPR</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TRADEDATE</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-01-04</th>\n",
       "      <td>TQBR</td>\n",
       "      <td>ROSN</td>\n",
       "      <td>22434</td>\n",
       "      <td>2.803388e+09</td>\n",
       "      <td>435.85</td>\n",
       "      <td>433.00</td>\n",
       "      <td>442.60</td>\n",
       "      <td>437.65</td>\n",
       "      <td>436.00</td>\n",
       "      <td>6405540</td>\n",
       "      <td>0.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-05</th>\n",
       "      <td>TQBR</td>\n",
       "      <td>ROSN</td>\n",
       "      <td>23452</td>\n",
       "      <td>2.974642e+09</td>\n",
       "      <td>436.00</td>\n",
       "      <td>433.30</td>\n",
       "      <td>450.70</td>\n",
       "      <td>442.10</td>\n",
       "      <td>449.35</td>\n",
       "      <td>6728320</td>\n",
       "      <td>3.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-06</th>\n",
       "      <td>TQBR</td>\n",
       "      <td>ROSN</td>\n",
       "      <td>27750</td>\n",
       "      <td>3.697371e+09</td>\n",
       "      <td>449.35</td>\n",
       "      <td>443.70</td>\n",
       "      <td>454.65</td>\n",
       "      <td>449.25</td>\n",
       "      <td>453.70</td>\n",
       "      <td>8230020</td>\n",
       "      <td>0.97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-08</th>\n",
       "      <td>TQBR</td>\n",
       "      <td>ROSN</td>\n",
       "      <td>42210</td>\n",
       "      <td>6.045034e+09</td>\n",
       "      <td>465.10</td>\n",
       "      <td>463.80</td>\n",
       "      <td>481.00</td>\n",
       "      <td>473.20</td>\n",
       "      <td>478.20</td>\n",
       "      <td>12774820</td>\n",
       "      <td>5.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-11</th>\n",
       "      <td>TQBR</td>\n",
       "      <td>ROSN</td>\n",
       "      <td>29306</td>\n",
       "      <td>4.160569e+09</td>\n",
       "      <td>474.55</td>\n",
       "      <td>464.00</td>\n",
       "      <td>480.10</td>\n",
       "      <td>473.05</td>\n",
       "      <td>473.25</td>\n",
       "      <td>8794770</td>\n",
       "      <td>-1.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-26</th>\n",
       "      <td>TQBR</td>\n",
       "      <td>ROSN</td>\n",
       "      <td>68952</td>\n",
       "      <td>2.624107e+09</td>\n",
       "      <td>559.00</td>\n",
       "      <td>554.15</td>\n",
       "      <td>559.00</td>\n",
       "      <td>555.70</td>\n",
       "      <td>556.10</td>\n",
       "      <td>4720207</td>\n",
       "      <td>-0.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-27</th>\n",
       "      <td>TQBR</td>\n",
       "      <td>ROSN</td>\n",
       "      <td>68318</td>\n",
       "      <td>2.007951e+09</td>\n",
       "      <td>556.10</td>\n",
       "      <td>551.25</td>\n",
       "      <td>557.50</td>\n",
       "      <td>554.10</td>\n",
       "      <td>555.40</td>\n",
       "      <td>3623708</td>\n",
       "      <td>-0.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-28</th>\n",
       "      <td>TQBR</td>\n",
       "      <td>ROSN</td>\n",
       "      <td>94910</td>\n",
       "      <td>4.580909e+09</td>\n",
       "      <td>557.00</td>\n",
       "      <td>555.75</td>\n",
       "      <td>565.80</td>\n",
       "      <td>561.80</td>\n",
       "      <td>565.75</td>\n",
       "      <td>8154564</td>\n",
       "      <td>1.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-29</th>\n",
       "      <td>TQBR</td>\n",
       "      <td>ROSN</td>\n",
       "      <td>68341</td>\n",
       "      <td>3.155869e+09</td>\n",
       "      <td>567.60</td>\n",
       "      <td>563.50</td>\n",
       "      <td>569.40</td>\n",
       "      <td>566.00</td>\n",
       "      <td>565.75</td>\n",
       "      <td>5575648</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-04-01</th>\n",
       "      <td>TQBR</td>\n",
       "      <td>ROSN</td>\n",
       "      <td>92818</td>\n",
       "      <td>4.675168e+09</td>\n",
       "      <td>568.00</td>\n",
       "      <td>566.80</td>\n",
       "      <td>573.55</td>\n",
       "      <td>570.60</td>\n",
       "      <td>568.85</td>\n",
       "      <td>8194319</td>\n",
       "      <td>0.55</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>823 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           BOARDID SECID  NUMTRADES         VALUE    OPEN     LOW    HIGH  \\\n",
       "TRADEDATE                                                                   \n",
       "2021-01-04    TQBR  ROSN      22434  2.803388e+09  435.85  433.00  442.60   \n",
       "2021-01-05    TQBR  ROSN      23452  2.974642e+09  436.00  433.30  450.70   \n",
       "2021-01-06    TQBR  ROSN      27750  3.697371e+09  449.35  443.70  454.65   \n",
       "2021-01-08    TQBR  ROSN      42210  6.045034e+09  465.10  463.80  481.00   \n",
       "2021-01-11    TQBR  ROSN      29306  4.160569e+09  474.55  464.00  480.10   \n",
       "...            ...   ...        ...           ...     ...     ...     ...   \n",
       "2024-03-26    TQBR  ROSN      68952  2.624107e+09  559.00  554.15  559.00   \n",
       "2024-03-27    TQBR  ROSN      68318  2.007951e+09  556.10  551.25  557.50   \n",
       "2024-03-28    TQBR  ROSN      94910  4.580909e+09  557.00  555.75  565.80   \n",
       "2024-03-29    TQBR  ROSN      68341  3.155869e+09  567.60  563.50  569.40   \n",
       "2024-04-01    TQBR  ROSN      92818  4.675168e+09  568.00  566.80  573.55   \n",
       "\n",
       "            WAPRICE   CLOSE    VOLUME  TRENDCLSPR  \n",
       "TRADEDATE                                          \n",
       "2021-01-04   437.65  436.00   6405540        0.21  \n",
       "2021-01-05   442.10  449.35   6728320        3.06  \n",
       "2021-01-06   449.25  453.70   8230020        0.97  \n",
       "2021-01-08   473.20  478.20  12774820        5.40  \n",
       "2021-01-11   473.05  473.25   8794770       -1.04  \n",
       "...             ...     ...       ...         ...  \n",
       "2024-03-26   555.70  556.10   4720207       -0.35  \n",
       "2024-03-27   554.10  555.40   3623708       -0.13  \n",
       "2024-03-28   561.80  565.75   8154564        1.86  \n",
       "2024-03-29   566.00  565.75   5575648        0.00  \n",
       "2024-04-01   570.60  568.85   8194319        0.55  \n",
       "\n",
       "[823 rows x 11 columns]"
      ]
     },
     "execution_count": 728,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_ROSN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 729,
   "id": "4b44e609",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_ROSN['IMOEX_CLOSE'] = df_IMOEX['CLOSE']\n",
    "df_ROSN['IMOEX_OPEN'] = df_IMOEX['OPEN']\n",
    "df_ROSN['BR_WAPRICE'] = df_BR['WAPRICE']\n",
    "df_ROSN['BR_CLOSE'] = df_BR['CLOSE']\n",
    "df_ROSN['BR_OPE'] = df_BR['OPEN']\n",
    "df_ROSN['BR_HIGH'] = df_BR['HIGH']\n",
    "df_ROSN['BR_LOW'] = df_BR['LOW']\n",
    "df_ROSN['SI_WAPRICE'] = df_SI['WAPRICE']\n",
    "df_ROSN['SI_CLOSE'] = df_SI['CLOSE']\n",
    "df_ROSN['SI_OPE'] = df_SI['OPEN']\n",
    "df_ROSN['SI_HIGH'] = df_SI['HIGH']\n",
    "df_ROSN['SI_LOW'] = df_SI['LOW']\n",
    "columns_to_add = ['TRENDCLSPR', 'NUMTRADES', 'TradingVolume_RUB', 'TradingVolume_CONTR', 'OpenPositionsVolum_RUB', 'OpenPositionsVolum_CONTR', 'MarginRequirements']\n",
    "df_ROSN_Final = df_ROSN.merge(df_BR[columns_to_add], left_index=True, right_index=True, how='left')\n",
    "df_ROSN_Final = df_ROSN.merge(df_SI[columns_to_add], left_index=True, right_index=True, how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 730,
   "id": "abbbc156",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_ROSN_Final.dropna(inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ca90fc9",
   "metadata": {},
   "source": [
    "Опять же удаляем пропуски так как заполнение их среднем или другой статистикой не имеет экономического смысла в силу слишком большого промежутка времени на протяжении которого струткруа финансового рынка значительно менялась."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 731,
   "id": "947d9381",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>BOARDID</th>\n",
       "      <th>SECID</th>\n",
       "      <th>NUMTRADES_x</th>\n",
       "      <th>VALUE</th>\n",
       "      <th>OPEN</th>\n",
       "      <th>LOW</th>\n",
       "      <th>HIGH</th>\n",
       "      <th>WAPRICE</th>\n",
       "      <th>CLOSE</th>\n",
       "      <th>VOLUME</th>\n",
       "      <th>...</th>\n",
       "      <th>SI_OPE</th>\n",
       "      <th>SI_HIGH</th>\n",
       "      <th>SI_LOW</th>\n",
       "      <th>TRENDCLSPR_y</th>\n",
       "      <th>NUMTRADES_y</th>\n",
       "      <th>TradingVolume_RUB</th>\n",
       "      <th>TradingVolume_CONTR</th>\n",
       "      <th>OpenPositionsVolum_RUB</th>\n",
       "      <th>OpenPositionsVolum_CONTR</th>\n",
       "      <th>MarginRequirements</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TRADEDATE</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-01-05</th>\n",
       "      <td>TQBR</td>\n",
       "      <td>ROSN</td>\n",
       "      <td>23452</td>\n",
       "      <td>2.974642e+09</td>\n",
       "      <td>436.00</td>\n",
       "      <td>433.30</td>\n",
       "      <td>450.70</td>\n",
       "      <td>442.10</td>\n",
       "      <td>449.35</td>\n",
       "      <td>6728320</td>\n",
       "      <td>...</td>\n",
       "      <td>74500.0</td>\n",
       "      <td>75818.0</td>\n",
       "      <td>74403.0</td>\n",
       "      <td>0.0043</td>\n",
       "      <td>911840.0</td>\n",
       "      <td>3.042276e+11</td>\n",
       "      <td>4049800.0</td>\n",
       "      <td>1.830614e+11</td>\n",
       "      <td>2449080.0</td>\n",
       "      <td>6187.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-06</th>\n",
       "      <td>TQBR</td>\n",
       "      <td>ROSN</td>\n",
       "      <td>27750</td>\n",
       "      <td>3.697371e+09</td>\n",
       "      <td>449.35</td>\n",
       "      <td>443.70</td>\n",
       "      <td>454.65</td>\n",
       "      <td>449.25</td>\n",
       "      <td>453.70</td>\n",
       "      <td>8230020</td>\n",
       "      <td>...</td>\n",
       "      <td>74780.0</td>\n",
       "      <td>74780.0</td>\n",
       "      <td>73908.0</td>\n",
       "      <td>-0.0039</td>\n",
       "      <td>768465.0</td>\n",
       "      <td>2.354906e+11</td>\n",
       "      <td>3168486.0</td>\n",
       "      <td>1.843702e+11</td>\n",
       "      <td>2474568.0</td>\n",
       "      <td>6165.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-08</th>\n",
       "      <td>TQBR</td>\n",
       "      <td>ROSN</td>\n",
       "      <td>42210</td>\n",
       "      <td>6.045034e+09</td>\n",
       "      <td>465.10</td>\n",
       "      <td>463.80</td>\n",
       "      <td>481.00</td>\n",
       "      <td>473.20</td>\n",
       "      <td>478.20</td>\n",
       "      <td>12774820</td>\n",
       "      <td>...</td>\n",
       "      <td>74455.0</td>\n",
       "      <td>75350.0</td>\n",
       "      <td>74165.0</td>\n",
       "      <td>0.0036</td>\n",
       "      <td>866939.0</td>\n",
       "      <td>2.745035e+11</td>\n",
       "      <td>3674288.0</td>\n",
       "      <td>1.854175e+11</td>\n",
       "      <td>2478844.0</td>\n",
       "      <td>5061.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-11</th>\n",
       "      <td>TQBR</td>\n",
       "      <td>ROSN</td>\n",
       "      <td>29306</td>\n",
       "      <td>4.160569e+09</td>\n",
       "      <td>474.55</td>\n",
       "      <td>464.00</td>\n",
       "      <td>480.10</td>\n",
       "      <td>473.05</td>\n",
       "      <td>473.25</td>\n",
       "      <td>8794770</td>\n",
       "      <td>...</td>\n",
       "      <td>74764.0</td>\n",
       "      <td>75528.0</td>\n",
       "      <td>74510.0</td>\n",
       "      <td>0.0068</td>\n",
       "      <td>819343.0</td>\n",
       "      <td>2.859884e+11</td>\n",
       "      <td>3809695.0</td>\n",
       "      <td>2.081633e+11</td>\n",
       "      <td>2764526.0</td>\n",
       "      <td>5093.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-12</th>\n",
       "      <td>TQBR</td>\n",
       "      <td>ROSN</td>\n",
       "      <td>22979</td>\n",
       "      <td>3.357990e+09</td>\n",
       "      <td>475.00</td>\n",
       "      <td>466.25</td>\n",
       "      <td>479.20</td>\n",
       "      <td>474.15</td>\n",
       "      <td>474.40</td>\n",
       "      <td>7084430</td>\n",
       "      <td>...</td>\n",
       "      <td>75254.0</td>\n",
       "      <td>75274.0</td>\n",
       "      <td>74072.0</td>\n",
       "      <td>-0.0155</td>\n",
       "      <td>786687.0</td>\n",
       "      <td>2.823069e+11</td>\n",
       "      <td>3779774.0</td>\n",
       "      <td>2.144555e+11</td>\n",
       "      <td>2894292.0</td>\n",
       "      <td>5010.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-25</th>\n",
       "      <td>TQBR</td>\n",
       "      <td>ROSN</td>\n",
       "      <td>115063</td>\n",
       "      <td>4.745453e+09</td>\n",
       "      <td>556.70</td>\n",
       "      <td>548.50</td>\n",
       "      <td>559.85</td>\n",
       "      <td>552.70</td>\n",
       "      <td>558.05</td>\n",
       "      <td>8585063</td>\n",
       "      <td>...</td>\n",
       "      <td>95330.0</td>\n",
       "      <td>96085.0</td>\n",
       "      <td>94870.0</td>\n",
       "      <td>-0.0020</td>\n",
       "      <td>203417.0</td>\n",
       "      <td>8.776455e+10</td>\n",
       "      <td>921462.0</td>\n",
       "      <td>5.283995e+11</td>\n",
       "      <td>5553740.0</td>\n",
       "      <td>14727.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-26</th>\n",
       "      <td>TQBR</td>\n",
       "      <td>ROSN</td>\n",
       "      <td>68952</td>\n",
       "      <td>2.624107e+09</td>\n",
       "      <td>559.00</td>\n",
       "      <td>554.15</td>\n",
       "      <td>559.00</td>\n",
       "      <td>555.70</td>\n",
       "      <td>556.10</td>\n",
       "      <td>4720207</td>\n",
       "      <td>...</td>\n",
       "      <td>95110.0</td>\n",
       "      <td>95354.0</td>\n",
       "      <td>94700.0</td>\n",
       "      <td>0.0008</td>\n",
       "      <td>136058.0</td>\n",
       "      <td>6.105293e+10</td>\n",
       "      <td>642555.0</td>\n",
       "      <td>5.479354e+11</td>\n",
       "      <td>5754294.0</td>\n",
       "      <td>14739.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-27</th>\n",
       "      <td>TQBR</td>\n",
       "      <td>ROSN</td>\n",
       "      <td>68318</td>\n",
       "      <td>2.007951e+09</td>\n",
       "      <td>556.10</td>\n",
       "      <td>551.25</td>\n",
       "      <td>557.50</td>\n",
       "      <td>554.10</td>\n",
       "      <td>555.40</td>\n",
       "      <td>3623708</td>\n",
       "      <td>...</td>\n",
       "      <td>95207.0</td>\n",
       "      <td>95308.0</td>\n",
       "      <td>94218.0</td>\n",
       "      <td>-0.0080</td>\n",
       "      <td>217518.0</td>\n",
       "      <td>8.772180e+10</td>\n",
       "      <td>925341.0</td>\n",
       "      <td>5.646384e+11</td>\n",
       "      <td>5976338.0</td>\n",
       "      <td>14642.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-28</th>\n",
       "      <td>TQBR</td>\n",
       "      <td>ROSN</td>\n",
       "      <td>94910</td>\n",
       "      <td>4.580909e+09</td>\n",
       "      <td>557.00</td>\n",
       "      <td>555.75</td>\n",
       "      <td>565.80</td>\n",
       "      <td>561.80</td>\n",
       "      <td>565.75</td>\n",
       "      <td>8154564</td>\n",
       "      <td>...</td>\n",
       "      <td>94461.0</td>\n",
       "      <td>94866.0</td>\n",
       "      <td>94308.0</td>\n",
       "      <td>0.0038</td>\n",
       "      <td>171315.0</td>\n",
       "      <td>6.996893e+10</td>\n",
       "      <td>739369.0</td>\n",
       "      <td>5.558412e+11</td>\n",
       "      <td>5864232.0</td>\n",
       "      <td>14704.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-29</th>\n",
       "      <td>TQBR</td>\n",
       "      <td>ROSN</td>\n",
       "      <td>68341</td>\n",
       "      <td>3.155869e+09</td>\n",
       "      <td>567.60</td>\n",
       "      <td>563.50</td>\n",
       "      <td>569.40</td>\n",
       "      <td>566.00</td>\n",
       "      <td>565.75</td>\n",
       "      <td>5575648</td>\n",
       "      <td>...</td>\n",
       "      <td>94822.0</td>\n",
       "      <td>94899.0</td>\n",
       "      <td>94050.0</td>\n",
       "      <td>-0.0038</td>\n",
       "      <td>224650.0</td>\n",
       "      <td>1.037324e+11</td>\n",
       "      <td>1099329.0</td>\n",
       "      <td>5.482194e+11</td>\n",
       "      <td>5803536.0</td>\n",
       "      <td>14687.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>749 rows × 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           BOARDID SECID  NUMTRADES_x         VALUE    OPEN     LOW    HIGH  \\\n",
       "TRADEDATE                                                                     \n",
       "2021-01-05    TQBR  ROSN        23452  2.974642e+09  436.00  433.30  450.70   \n",
       "2021-01-06    TQBR  ROSN        27750  3.697371e+09  449.35  443.70  454.65   \n",
       "2021-01-08    TQBR  ROSN        42210  6.045034e+09  465.10  463.80  481.00   \n",
       "2021-01-11    TQBR  ROSN        29306  4.160569e+09  474.55  464.00  480.10   \n",
       "2021-01-12    TQBR  ROSN        22979  3.357990e+09  475.00  466.25  479.20   \n",
       "...            ...   ...          ...           ...     ...     ...     ...   \n",
       "2024-03-25    TQBR  ROSN       115063  4.745453e+09  556.70  548.50  559.85   \n",
       "2024-03-26    TQBR  ROSN        68952  2.624107e+09  559.00  554.15  559.00   \n",
       "2024-03-27    TQBR  ROSN        68318  2.007951e+09  556.10  551.25  557.50   \n",
       "2024-03-28    TQBR  ROSN        94910  4.580909e+09  557.00  555.75  565.80   \n",
       "2024-03-29    TQBR  ROSN        68341  3.155869e+09  567.60  563.50  569.40   \n",
       "\n",
       "            WAPRICE   CLOSE    VOLUME  ...   SI_OPE  SI_HIGH   SI_LOW  \\\n",
       "TRADEDATE                              ...                              \n",
       "2021-01-05   442.10  449.35   6728320  ...  74500.0  75818.0  74403.0   \n",
       "2021-01-06   449.25  453.70   8230020  ...  74780.0  74780.0  73908.0   \n",
       "2021-01-08   473.20  478.20  12774820  ...  74455.0  75350.0  74165.0   \n",
       "2021-01-11   473.05  473.25   8794770  ...  74764.0  75528.0  74510.0   \n",
       "2021-01-12   474.15  474.40   7084430  ...  75254.0  75274.0  74072.0   \n",
       "...             ...     ...       ...  ...      ...      ...      ...   \n",
       "2024-03-25   552.70  558.05   8585063  ...  95330.0  96085.0  94870.0   \n",
       "2024-03-26   555.70  556.10   4720207  ...  95110.0  95354.0  94700.0   \n",
       "2024-03-27   554.10  555.40   3623708  ...  95207.0  95308.0  94218.0   \n",
       "2024-03-28   561.80  565.75   8154564  ...  94461.0  94866.0  94308.0   \n",
       "2024-03-29   566.00  565.75   5575648  ...  94822.0  94899.0  94050.0   \n",
       "\n",
       "            TRENDCLSPR_y  NUMTRADES_y  TradingVolume_RUB  TradingVolume_CONTR  \\\n",
       "TRADEDATE                                                                       \n",
       "2021-01-05        0.0043     911840.0       3.042276e+11            4049800.0   \n",
       "2021-01-06       -0.0039     768465.0       2.354906e+11            3168486.0   \n",
       "2021-01-08        0.0036     866939.0       2.745035e+11            3674288.0   \n",
       "2021-01-11        0.0068     819343.0       2.859884e+11            3809695.0   \n",
       "2021-01-12       -0.0155     786687.0       2.823069e+11            3779774.0   \n",
       "...                  ...          ...                ...                  ...   \n",
       "2024-03-25       -0.0020     203417.0       8.776455e+10             921462.0   \n",
       "2024-03-26        0.0008     136058.0       6.105293e+10             642555.0   \n",
       "2024-03-27       -0.0080     217518.0       8.772180e+10             925341.0   \n",
       "2024-03-28        0.0038     171315.0       6.996893e+10             739369.0   \n",
       "2024-03-29       -0.0038     224650.0       1.037324e+11            1099329.0   \n",
       "\n",
       "            OpenPositionsVolum_RUB  OpenPositionsVolum_CONTR  \\\n",
       "TRADEDATE                                                      \n",
       "2021-01-05            1.830614e+11                 2449080.0   \n",
       "2021-01-06            1.843702e+11                 2474568.0   \n",
       "2021-01-08            1.854175e+11                 2478844.0   \n",
       "2021-01-11            2.081633e+11                 2764526.0   \n",
       "2021-01-12            2.144555e+11                 2894292.0   \n",
       "...                            ...                       ...   \n",
       "2024-03-25            5.283995e+11                 5553740.0   \n",
       "2024-03-26            5.479354e+11                 5754294.0   \n",
       "2024-03-27            5.646384e+11                 5976338.0   \n",
       "2024-03-28            5.558412e+11                 5864232.0   \n",
       "2024-03-29            5.482194e+11                 5803536.0   \n",
       "\n",
       "            MarginRequirements  \n",
       "TRADEDATE                       \n",
       "2021-01-05              6187.0  \n",
       "2021-01-06              6165.0  \n",
       "2021-01-08              5061.0  \n",
       "2021-01-11              5093.0  \n",
       "2021-01-12              5010.0  \n",
       "...                        ...  \n",
       "2024-03-25             14727.0  \n",
       "2024-03-26             14739.0  \n",
       "2024-03-27             14642.0  \n",
       "2024-03-28             14704.0  \n",
       "2024-03-29             14687.0  \n",
       "\n",
       "[749 rows x 30 columns]"
      ]
     },
     "execution_count": 731,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_ROSN_Final"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5746e2bc",
   "metadata": {},
   "source": [
    "## Предобработка данных перед машинным обучением"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 732,
   "id": "3b40072c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['BOARDID', 'SECID', 'NUMTRADES_x', 'VALUE', 'OPEN', 'LOW', 'HIGH',\n",
       "       'WAPRICE', 'CLOSE', 'VOLUME', 'TRENDCLSPR_x', 'IMOEX_CLOSE',\n",
       "       'IMOEX_OPEN', 'BR_WAPRICE', 'BR_CLOSE', 'BR_OPE', 'BR_HIGH', 'BR_LOW',\n",
       "       'SI_WAPRICE', 'SI_CLOSE', 'SI_OPE', 'SI_HIGH', 'SI_LOW', 'TRENDCLSPR_y',\n",
       "       'NUMTRADES_y', 'TradingVolume_RUB', 'TradingVolume_CONTR',\n",
       "       'OpenPositionsVolum_RUB', 'OpenPositionsVolum_CONTR',\n",
       "       'MarginRequirements'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 732,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_ROSN_Final.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 733,
   "id": "006e8693",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 749 entries, 2021-01-05 to 2024-03-29\n",
      "Data columns (total 30 columns):\n",
      " #   Column                    Non-Null Count  Dtype  \n",
      "---  ------                    --------------  -----  \n",
      " 0   BOARDID                   749 non-null    object \n",
      " 1   SECID                     749 non-null    object \n",
      " 2   NUMTRADES_x               749 non-null    int64  \n",
      " 3   VALUE                     749 non-null    float64\n",
      " 4   OPEN                      749 non-null    float64\n",
      " 5   LOW                       749 non-null    float64\n",
      " 6   HIGH                      749 non-null    float64\n",
      " 7   WAPRICE                   749 non-null    float64\n",
      " 8   CLOSE                     749 non-null    float64\n",
      " 9   VOLUME                    749 non-null    int64  \n",
      " 10  TRENDCLSPR_x              749 non-null    float64\n",
      " 11  IMOEX_CLOSE               749 non-null    float64\n",
      " 12  IMOEX_OPEN                749 non-null    float64\n",
      " 13  BR_WAPRICE                749 non-null    float64\n",
      " 14  BR_CLOSE                  749 non-null    float64\n",
      " 15  BR_OPE                    749 non-null    float64\n",
      " 16  BR_HIGH                   749 non-null    float64\n",
      " 17  BR_LOW                    749 non-null    float64\n",
      " 18  SI_WAPRICE                749 non-null    float64\n",
      " 19  SI_CLOSE                  749 non-null    float64\n",
      " 20  SI_OPE                    749 non-null    float64\n",
      " 21  SI_HIGH                   749 non-null    float64\n",
      " 22  SI_LOW                    749 non-null    float64\n",
      " 23  TRENDCLSPR_y              749 non-null    float64\n",
      " 24  NUMTRADES_y               749 non-null    float64\n",
      " 25  TradingVolume_RUB         749 non-null    float64\n",
      " 26  TradingVolume_CONTR       749 non-null    float64\n",
      " 27  OpenPositionsVolum_RUB    749 non-null    float64\n",
      " 28  OpenPositionsVolum_CONTR  749 non-null    float64\n",
      " 29  MarginRequirements        749 non-null    float64\n",
      "dtypes: float64(26), int64(2), object(2)\n",
      "memory usage: 181.4+ KB\n"
     ]
    }
   ],
   "source": [
    "df_ROSN_Final.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f5ead1a",
   "metadata": {},
   "source": [
    "Так как мы предсказываем котировки на данный момент лишь для акций компании Роснефть, то первые два признака, а именно BOARDID И SECID являются константнымим, следовательно их можно исключить из датафрейма"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 734,
   "id": "9e228e88",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_ROSN_Final.drop(['BOARDID', 'SECID'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 735,
   "id": "091f77bd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NUMTRADES_x</th>\n",
       "      <th>VALUE</th>\n",
       "      <th>OPEN</th>\n",
       "      <th>LOW</th>\n",
       "      <th>HIGH</th>\n",
       "      <th>WAPRICE</th>\n",
       "      <th>CLOSE</th>\n",
       "      <th>VOLUME</th>\n",
       "      <th>TRENDCLSPR_x</th>\n",
       "      <th>IMOEX_CLOSE</th>\n",
       "      <th>...</th>\n",
       "      <th>SI_OPE</th>\n",
       "      <th>SI_HIGH</th>\n",
       "      <th>SI_LOW</th>\n",
       "      <th>TRENDCLSPR_y</th>\n",
       "      <th>NUMTRADES_y</th>\n",
       "      <th>TradingVolume_RUB</th>\n",
       "      <th>TradingVolume_CONTR</th>\n",
       "      <th>OpenPositionsVolum_RUB</th>\n",
       "      <th>OpenPositionsVolum_CONTR</th>\n",
       "      <th>MarginRequirements</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TRADEDATE</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-01-05</th>\n",
       "      <td>23452</td>\n",
       "      <td>2.974642e+09</td>\n",
       "      <td>436.00</td>\n",
       "      <td>433.30</td>\n",
       "      <td>450.70</td>\n",
       "      <td>442.10</td>\n",
       "      <td>449.35</td>\n",
       "      <td>6728320</td>\n",
       "      <td>3.06</td>\n",
       "      <td>3359.15</td>\n",
       "      <td>...</td>\n",
       "      <td>74500.0</td>\n",
       "      <td>75818.0</td>\n",
       "      <td>74403.0</td>\n",
       "      <td>0.0043</td>\n",
       "      <td>911840.0</td>\n",
       "      <td>3.042276e+11</td>\n",
       "      <td>4049800.0</td>\n",
       "      <td>1.830614e+11</td>\n",
       "      <td>2449080.0</td>\n",
       "      <td>6187.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-06</th>\n",
       "      <td>27750</td>\n",
       "      <td>3.697371e+09</td>\n",
       "      <td>449.35</td>\n",
       "      <td>443.70</td>\n",
       "      <td>454.65</td>\n",
       "      <td>449.25</td>\n",
       "      <td>453.70</td>\n",
       "      <td>8230020</td>\n",
       "      <td>0.97</td>\n",
       "      <td>3371.03</td>\n",
       "      <td>...</td>\n",
       "      <td>74780.0</td>\n",
       "      <td>74780.0</td>\n",
       "      <td>73908.0</td>\n",
       "      <td>-0.0039</td>\n",
       "      <td>768465.0</td>\n",
       "      <td>2.354906e+11</td>\n",
       "      <td>3168486.0</td>\n",
       "      <td>1.843702e+11</td>\n",
       "      <td>2474568.0</td>\n",
       "      <td>6165.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-08</th>\n",
       "      <td>42210</td>\n",
       "      <td>6.045034e+09</td>\n",
       "      <td>465.10</td>\n",
       "      <td>463.80</td>\n",
       "      <td>481.00</td>\n",
       "      <td>473.20</td>\n",
       "      <td>478.20</td>\n",
       "      <td>12774820</td>\n",
       "      <td>5.40</td>\n",
       "      <td>3454.82</td>\n",
       "      <td>...</td>\n",
       "      <td>74455.0</td>\n",
       "      <td>75350.0</td>\n",
       "      <td>74165.0</td>\n",
       "      <td>0.0036</td>\n",
       "      <td>866939.0</td>\n",
       "      <td>2.745035e+11</td>\n",
       "      <td>3674288.0</td>\n",
       "      <td>1.854175e+11</td>\n",
       "      <td>2478844.0</td>\n",
       "      <td>5061.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-11</th>\n",
       "      <td>29306</td>\n",
       "      <td>4.160569e+09</td>\n",
       "      <td>474.55</td>\n",
       "      <td>464.00</td>\n",
       "      <td>480.10</td>\n",
       "      <td>473.05</td>\n",
       "      <td>473.25</td>\n",
       "      <td>8794770</td>\n",
       "      <td>-1.04</td>\n",
       "      <td>3482.48</td>\n",
       "      <td>...</td>\n",
       "      <td>74764.0</td>\n",
       "      <td>75528.0</td>\n",
       "      <td>74510.0</td>\n",
       "      <td>0.0068</td>\n",
       "      <td>819343.0</td>\n",
       "      <td>2.859884e+11</td>\n",
       "      <td>3809695.0</td>\n",
       "      <td>2.081633e+11</td>\n",
       "      <td>2764526.0</td>\n",
       "      <td>5093.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-12</th>\n",
       "      <td>22979</td>\n",
       "      <td>3.357990e+09</td>\n",
       "      <td>475.00</td>\n",
       "      <td>466.25</td>\n",
       "      <td>479.20</td>\n",
       "      <td>474.15</td>\n",
       "      <td>474.40</td>\n",
       "      <td>7084430</td>\n",
       "      <td>0.24</td>\n",
       "      <td>3471.65</td>\n",
       "      <td>...</td>\n",
       "      <td>75254.0</td>\n",
       "      <td>75274.0</td>\n",
       "      <td>74072.0</td>\n",
       "      <td>-0.0155</td>\n",
       "      <td>786687.0</td>\n",
       "      <td>2.823069e+11</td>\n",
       "      <td>3779774.0</td>\n",
       "      <td>2.144555e+11</td>\n",
       "      <td>2894292.0</td>\n",
       "      <td>5010.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-25</th>\n",
       "      <td>115063</td>\n",
       "      <td>4.745453e+09</td>\n",
       "      <td>556.70</td>\n",
       "      <td>548.50</td>\n",
       "      <td>559.85</td>\n",
       "      <td>552.70</td>\n",
       "      <td>558.05</td>\n",
       "      <td>8585063</td>\n",
       "      <td>0.69</td>\n",
       "      <td>3281.63</td>\n",
       "      <td>...</td>\n",
       "      <td>95330.0</td>\n",
       "      <td>96085.0</td>\n",
       "      <td>94870.0</td>\n",
       "      <td>-0.0020</td>\n",
       "      <td>203417.0</td>\n",
       "      <td>8.776455e+10</td>\n",
       "      <td>921462.0</td>\n",
       "      <td>5.283995e+11</td>\n",
       "      <td>5553740.0</td>\n",
       "      <td>14727.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-26</th>\n",
       "      <td>68952</td>\n",
       "      <td>2.624107e+09</td>\n",
       "      <td>559.00</td>\n",
       "      <td>554.15</td>\n",
       "      <td>559.00</td>\n",
       "      <td>555.70</td>\n",
       "      <td>556.10</td>\n",
       "      <td>4720207</td>\n",
       "      <td>-0.35</td>\n",
       "      <td>3285.54</td>\n",
       "      <td>...</td>\n",
       "      <td>95110.0</td>\n",
       "      <td>95354.0</td>\n",
       "      <td>94700.0</td>\n",
       "      <td>0.0008</td>\n",
       "      <td>136058.0</td>\n",
       "      <td>6.105293e+10</td>\n",
       "      <td>642555.0</td>\n",
       "      <td>5.479354e+11</td>\n",
       "      <td>5754294.0</td>\n",
       "      <td>14739.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-27</th>\n",
       "      <td>68318</td>\n",
       "      <td>2.007951e+09</td>\n",
       "      <td>556.10</td>\n",
       "      <td>551.25</td>\n",
       "      <td>557.50</td>\n",
       "      <td>554.10</td>\n",
       "      <td>555.40</td>\n",
       "      <td>3623708</td>\n",
       "      <td>-0.13</td>\n",
       "      <td>3304.09</td>\n",
       "      <td>...</td>\n",
       "      <td>95207.0</td>\n",
       "      <td>95308.0</td>\n",
       "      <td>94218.0</td>\n",
       "      <td>-0.0080</td>\n",
       "      <td>217518.0</td>\n",
       "      <td>8.772180e+10</td>\n",
       "      <td>925341.0</td>\n",
       "      <td>5.646384e+11</td>\n",
       "      <td>5976338.0</td>\n",
       "      <td>14642.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-28</th>\n",
       "      <td>94910</td>\n",
       "      <td>4.580909e+09</td>\n",
       "      <td>557.00</td>\n",
       "      <td>555.75</td>\n",
       "      <td>565.80</td>\n",
       "      <td>561.80</td>\n",
       "      <td>565.75</td>\n",
       "      <td>8154564</td>\n",
       "      <td>1.86</td>\n",
       "      <td>3312.77</td>\n",
       "      <td>...</td>\n",
       "      <td>94461.0</td>\n",
       "      <td>94866.0</td>\n",
       "      <td>94308.0</td>\n",
       "      <td>0.0038</td>\n",
       "      <td>171315.0</td>\n",
       "      <td>6.996893e+10</td>\n",
       "      <td>739369.0</td>\n",
       "      <td>5.558412e+11</td>\n",
       "      <td>5864232.0</td>\n",
       "      <td>14704.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-03-29</th>\n",
       "      <td>68341</td>\n",
       "      <td>3.155869e+09</td>\n",
       "      <td>567.60</td>\n",
       "      <td>563.50</td>\n",
       "      <td>569.40</td>\n",
       "      <td>566.00</td>\n",
       "      <td>565.75</td>\n",
       "      <td>5575648</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3332.53</td>\n",
       "      <td>...</td>\n",
       "      <td>94822.0</td>\n",
       "      <td>94899.0</td>\n",
       "      <td>94050.0</td>\n",
       "      <td>-0.0038</td>\n",
       "      <td>224650.0</td>\n",
       "      <td>1.037324e+11</td>\n",
       "      <td>1099329.0</td>\n",
       "      <td>5.482194e+11</td>\n",
       "      <td>5803536.0</td>\n",
       "      <td>14687.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>749 rows × 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            NUMTRADES_x         VALUE    OPEN     LOW    HIGH  WAPRICE  \\\n",
       "TRADEDATE                                                                \n",
       "2021-01-05        23452  2.974642e+09  436.00  433.30  450.70   442.10   \n",
       "2021-01-06        27750  3.697371e+09  449.35  443.70  454.65   449.25   \n",
       "2021-01-08        42210  6.045034e+09  465.10  463.80  481.00   473.20   \n",
       "2021-01-11        29306  4.160569e+09  474.55  464.00  480.10   473.05   \n",
       "2021-01-12        22979  3.357990e+09  475.00  466.25  479.20   474.15   \n",
       "...                 ...           ...     ...     ...     ...      ...   \n",
       "2024-03-25       115063  4.745453e+09  556.70  548.50  559.85   552.70   \n",
       "2024-03-26        68952  2.624107e+09  559.00  554.15  559.00   555.70   \n",
       "2024-03-27        68318  2.007951e+09  556.10  551.25  557.50   554.10   \n",
       "2024-03-28        94910  4.580909e+09  557.00  555.75  565.80   561.80   \n",
       "2024-03-29        68341  3.155869e+09  567.60  563.50  569.40   566.00   \n",
       "\n",
       "             CLOSE    VOLUME  TRENDCLSPR_x  IMOEX_CLOSE  ...   SI_OPE  \\\n",
       "TRADEDATE                                                ...            \n",
       "2021-01-05  449.35   6728320          3.06      3359.15  ...  74500.0   \n",
       "2021-01-06  453.70   8230020          0.97      3371.03  ...  74780.0   \n",
       "2021-01-08  478.20  12774820          5.40      3454.82  ...  74455.0   \n",
       "2021-01-11  473.25   8794770         -1.04      3482.48  ...  74764.0   \n",
       "2021-01-12  474.40   7084430          0.24      3471.65  ...  75254.0   \n",
       "...            ...       ...           ...          ...  ...      ...   \n",
       "2024-03-25  558.05   8585063          0.69      3281.63  ...  95330.0   \n",
       "2024-03-26  556.10   4720207         -0.35      3285.54  ...  95110.0   \n",
       "2024-03-27  555.40   3623708         -0.13      3304.09  ...  95207.0   \n",
       "2024-03-28  565.75   8154564          1.86      3312.77  ...  94461.0   \n",
       "2024-03-29  565.75   5575648          0.00      3332.53  ...  94822.0   \n",
       "\n",
       "            SI_HIGH   SI_LOW  TRENDCLSPR_y  NUMTRADES_y  TradingVolume_RUB  \\\n",
       "TRADEDATE                                                                    \n",
       "2021-01-05  75818.0  74403.0        0.0043     911840.0       3.042276e+11   \n",
       "2021-01-06  74780.0  73908.0       -0.0039     768465.0       2.354906e+11   \n",
       "2021-01-08  75350.0  74165.0        0.0036     866939.0       2.745035e+11   \n",
       "2021-01-11  75528.0  74510.0        0.0068     819343.0       2.859884e+11   \n",
       "2021-01-12  75274.0  74072.0       -0.0155     786687.0       2.823069e+11   \n",
       "...             ...      ...           ...          ...                ...   \n",
       "2024-03-25  96085.0  94870.0       -0.0020     203417.0       8.776455e+10   \n",
       "2024-03-26  95354.0  94700.0        0.0008     136058.0       6.105293e+10   \n",
       "2024-03-27  95308.0  94218.0       -0.0080     217518.0       8.772180e+10   \n",
       "2024-03-28  94866.0  94308.0        0.0038     171315.0       6.996893e+10   \n",
       "2024-03-29  94899.0  94050.0       -0.0038     224650.0       1.037324e+11   \n",
       "\n",
       "            TradingVolume_CONTR  OpenPositionsVolum_RUB  \\\n",
       "TRADEDATE                                                 \n",
       "2021-01-05            4049800.0            1.830614e+11   \n",
       "2021-01-06            3168486.0            1.843702e+11   \n",
       "2021-01-08            3674288.0            1.854175e+11   \n",
       "2021-01-11            3809695.0            2.081633e+11   \n",
       "2021-01-12            3779774.0            2.144555e+11   \n",
       "...                         ...                     ...   \n",
       "2024-03-25             921462.0            5.283995e+11   \n",
       "2024-03-26             642555.0            5.479354e+11   \n",
       "2024-03-27             925341.0            5.646384e+11   \n",
       "2024-03-28             739369.0            5.558412e+11   \n",
       "2024-03-29            1099329.0            5.482194e+11   \n",
       "\n",
       "            OpenPositionsVolum_CONTR  MarginRequirements  \n",
       "TRADEDATE                                                 \n",
       "2021-01-05                 2449080.0              6187.0  \n",
       "2021-01-06                 2474568.0              6165.0  \n",
       "2021-01-08                 2478844.0              5061.0  \n",
       "2021-01-11                 2764526.0              5093.0  \n",
       "2021-01-12                 2894292.0              5010.0  \n",
       "...                              ...                 ...  \n",
       "2024-03-25                 5553740.0             14727.0  \n",
       "2024-03-26                 5754294.0             14739.0  \n",
       "2024-03-27                 5976338.0             14642.0  \n",
       "2024-03-28                 5864232.0             14704.0  \n",
       "2024-03-29                 5803536.0             14687.0  \n",
       "\n",
       "[749 rows x 28 columns]"
      ]
     },
     "execution_count": 735,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_ROSN_Final"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ab6225e",
   "metadata": {},
   "source": [
    "Для более успешного обучения модели исходные данные необходимо нормализовать, чтобы по итогу модель выдавала более качественный прогноз. Что и с сделаем при помощи min-max нормализатора. Многие алгоритмы машинного обучения, особенно те, которые используют вычисление расстояний между точками данных или градиентный спуск (например, линейная регрессия, логистическая регрессия, нейронные сети), работают лучше, если все признаки имеют одинаковый масштаб. Несбалансированные масштабы могут привести к тому, что некоторые признаки будут доминировать в модели за счёт других, что может ухудшить качество обучения.\n",
    "\n",
    "Min-Max нормализация не меняет форму распределения данных, а лишь изменяет диапазон. Это может быть полезно, если данные не нуждаются в трансформации для коррекции асимметрии или выбросов.\n",
    "\n",
    "Этот метод нормализации достаточно прост и интуитивно понятен. Вычисления несложные: каждому значению признака присваивается значение между 0 и 1, что упрощает интерпретацию модели и помогает в диагностике и анализе данных.\n",
    "\n",
    "Если использовать стандартизацию, то может возникнуть проблема с делением на дисперсию, можно проще...Однако стоит помнить, что Min-Max нормализация может быть чувствительной к наличию выбросов, так как экстремальные значения могут сжать большую часть данных в узкий диапазон. Но, поскольку в наших данных как таковых, выбросов нет - за исключением пару дней в период февраля 22 года, то это можно опустить:\n",
    "$$x(new)=\\dfrac{x-\\min(X_{column})}{\\max(X_{column})-\\min(X_{column})}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 736,
   "id": "019dd0c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "normalizer = preprocessing.MinMaxScaler()\n",
    "df_ROSN_Final.columns = df_ROSN_Final.columns.astype(str)\n",
    "df_ROSN_Final_real_norm_np = normalizer.fit_transform(df_ROSN_Final)\n",
    "df_ROSN_Final = pd.DataFrame(data=df_ROSN_Final_real_norm_np)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0fe6be4c",
   "metadata": {},
   "source": [
    "## Линейная модель"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d908e8a3",
   "metadata": {},
   "source": [
    "Так как у нас немного данных, давайте проведем кросс-валидацию с делением нашей выборки на 3 блока, чтобы обучающая выборка не содержала слишком мало переменных: (Кросс-валидация на три блока (или 3-кратная кросс-валидация) — это метод оценки модели, при котором исходные данные разделяются на три части. Каждая часть поочерёдно используется в качестве тестовой выборки, а оставшиеся данные — в качестве обучающей выборки.) Использование кросс - валидации хоть и может быть неоправдано маленьким размером выборки, но с другой стороны мы будем включать данные в период СВО (похожие на вывбросы) несколько раз как и в обучающую, так и в тесновую выборки."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 737,
   "id": "6a8d8e26",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>18</th>\n",
       "      <th>19</th>\n",
       "      <th>20</th>\n",
       "      <th>21</th>\n",
       "      <th>22</th>\n",
       "      <th>23</th>\n",
       "      <th>24</th>\n",
       "      <th>25</th>\n",
       "      <th>26</th>\n",
       "      <th>27</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.045551</td>\n",
       "      <td>0.082303</td>\n",
       "      <td>0.441783</td>\n",
       "      <td>0.557767</td>\n",
       "      <td>0.464223</td>\n",
       "      <td>0.480648</td>\n",
       "      <td>0.484218</td>\n",
       "      <td>0.076705</td>\n",
       "      <td>0.738926</td>\n",
       "      <td>0.608374</td>\n",
       "      <td>...</td>\n",
       "      <td>0.410563</td>\n",
       "      <td>0.405630</td>\n",
       "      <td>0.470537</td>\n",
       "      <td>0.480826</td>\n",
       "      <td>0.483917</td>\n",
       "      <td>0.460045</td>\n",
       "      <td>0.483088</td>\n",
       "      <td>0.214172</td>\n",
       "      <td>0.233993</td>\n",
       "      <td>0.160811</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.056158</td>\n",
       "      <td>0.104199</td>\n",
       "      <td>0.474926</td>\n",
       "      <td>0.580268</td>\n",
       "      <td>0.474175</td>\n",
       "      <td>0.498735</td>\n",
       "      <td>0.495115</td>\n",
       "      <td>0.095744</td>\n",
       "      <td>0.699700</td>\n",
       "      <td>0.613385</td>\n",
       "      <td>...</td>\n",
       "      <td>0.416220</td>\n",
       "      <td>0.383511</td>\n",
       "      <td>0.460339</td>\n",
       "      <td>0.432448</td>\n",
       "      <td>0.395775</td>\n",
       "      <td>0.343518</td>\n",
       "      <td>0.366370</td>\n",
       "      <td>0.216633</td>\n",
       "      <td>0.237930</td>\n",
       "      <td>0.158921</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.091843</td>\n",
       "      <td>0.175325</td>\n",
       "      <td>0.514027</td>\n",
       "      <td>0.623756</td>\n",
       "      <td>0.540564</td>\n",
       "      <td>0.559322</td>\n",
       "      <td>0.556488</td>\n",
       "      <td>0.153365</td>\n",
       "      <td>0.782845</td>\n",
       "      <td>0.648731</td>\n",
       "      <td>...</td>\n",
       "      <td>0.409654</td>\n",
       "      <td>0.395657</td>\n",
       "      <td>0.465634</td>\n",
       "      <td>0.476696</td>\n",
       "      <td>0.456314</td>\n",
       "      <td>0.409655</td>\n",
       "      <td>0.433357</td>\n",
       "      <td>0.218602</td>\n",
       "      <td>0.238590</td>\n",
       "      <td>0.064084</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.059998</td>\n",
       "      <td>0.118233</td>\n",
       "      <td>0.537488</td>\n",
       "      <td>0.624189</td>\n",
       "      <td>0.538297</td>\n",
       "      <td>0.558943</td>\n",
       "      <td>0.544088</td>\n",
       "      <td>0.102904</td>\n",
       "      <td>0.661974</td>\n",
       "      <td>0.660399</td>\n",
       "      <td>...</td>\n",
       "      <td>0.415897</td>\n",
       "      <td>0.399450</td>\n",
       "      <td>0.472742</td>\n",
       "      <td>0.495575</td>\n",
       "      <td>0.427053</td>\n",
       "      <td>0.429125</td>\n",
       "      <td>0.451290</td>\n",
       "      <td>0.261375</td>\n",
       "      <td>0.282716</td>\n",
       "      <td>0.066833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.044384</td>\n",
       "      <td>0.093917</td>\n",
       "      <td>0.538605</td>\n",
       "      <td>0.629057</td>\n",
       "      <td>0.536029</td>\n",
       "      <td>0.561725</td>\n",
       "      <td>0.546969</td>\n",
       "      <td>0.081220</td>\n",
       "      <td>0.685998</td>\n",
       "      <td>0.655831</td>\n",
       "      <td>...</td>\n",
       "      <td>0.425798</td>\n",
       "      <td>0.394038</td>\n",
       "      <td>0.463718</td>\n",
       "      <td>0.364012</td>\n",
       "      <td>0.406977</td>\n",
       "      <td>0.422884</td>\n",
       "      <td>0.447327</td>\n",
       "      <td>0.273207</td>\n",
       "      <td>0.302760</td>\n",
       "      <td>0.059703</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.105419</td>\n",
       "      <td>0.217010</td>\n",
       "      <td>0.543570</td>\n",
       "      <td>0.650692</td>\n",
       "      <td>0.573192</td>\n",
       "      <td>0.589552</td>\n",
       "      <td>0.575902</td>\n",
       "      <td>0.185323</td>\n",
       "      <td>0.727102</td>\n",
       "      <td>0.655245</td>\n",
       "      <td>...</td>\n",
       "      <td>0.402117</td>\n",
       "      <td>0.377224</td>\n",
       "      <td>0.459329</td>\n",
       "      <td>0.458997</td>\n",
       "      <td>0.376878</td>\n",
       "      <td>0.418517</td>\n",
       "      <td>0.446109</td>\n",
       "      <td>0.263708</td>\n",
       "      <td>0.291853</td>\n",
       "      <td>0.059875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.129754</td>\n",
       "      <td>0.224380</td>\n",
       "      <td>0.563431</td>\n",
       "      <td>0.667568</td>\n",
       "      <td>0.602671</td>\n",
       "      <td>0.621300</td>\n",
       "      <td>0.623622</td>\n",
       "      <td>0.186623</td>\n",
       "      <td>0.755068</td>\n",
       "      <td>0.663930</td>\n",
       "      <td>...</td>\n",
       "      <td>0.403289</td>\n",
       "      <td>0.377821</td>\n",
       "      <td>0.455888</td>\n",
       "      <td>0.431858</td>\n",
       "      <td>0.346515</td>\n",
       "      <td>0.420422</td>\n",
       "      <td>0.449264</td>\n",
       "      <td>0.283797</td>\n",
       "      <td>0.315984</td>\n",
       "      <td>0.057985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.126099</td>\n",
       "      <td>0.268503</td>\n",
       "      <td>0.608118</td>\n",
       "      <td>0.698183</td>\n",
       "      <td>0.637944</td>\n",
       "      <td>0.651151</td>\n",
       "      <td>0.641658</td>\n",
       "      <td>0.218273</td>\n",
       "      <td>0.708333</td>\n",
       "      <td>0.647099</td>\n",
       "      <td>...</td>\n",
       "      <td>0.397107</td>\n",
       "      <td>0.374731</td>\n",
       "      <td>0.453643</td>\n",
       "      <td>0.486726</td>\n",
       "      <td>0.352237</td>\n",
       "      <td>0.419757</td>\n",
       "      <td>0.448894</td>\n",
       "      <td>0.286609</td>\n",
       "      <td>0.316765</td>\n",
       "      <td>0.059359</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.081508</td>\n",
       "      <td>0.158971</td>\n",
       "      <td>0.625372</td>\n",
       "      <td>0.713436</td>\n",
       "      <td>0.636306</td>\n",
       "      <td>0.660764</td>\n",
       "      <td>0.652430</td>\n",
       "      <td>0.127380</td>\n",
       "      <td>0.697260</td>\n",
       "      <td>0.655945</td>\n",
       "      <td>...</td>\n",
       "      <td>0.404744</td>\n",
       "      <td>0.385279</td>\n",
       "      <td>0.461513</td>\n",
       "      <td>0.484956</td>\n",
       "      <td>0.313497</td>\n",
       "      <td>0.381333</td>\n",
       "      <td>0.404965</td>\n",
       "      <td>0.317483</td>\n",
       "      <td>0.348372</td>\n",
       "      <td>0.061335</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.089210</td>\n",
       "      <td>0.187167</td>\n",
       "      <td>0.647592</td>\n",
       "      <td>0.716465</td>\n",
       "      <td>0.650920</td>\n",
       "      <td>0.662408</td>\n",
       "      <td>0.637901</td>\n",
       "      <td>0.150148</td>\n",
       "      <td>0.660473</td>\n",
       "      <td>0.643842</td>\n",
       "      <td>...</td>\n",
       "      <td>0.412664</td>\n",
       "      <td>0.379760</td>\n",
       "      <td>0.462997</td>\n",
       "      <td>0.422419</td>\n",
       "      <td>0.255414</td>\n",
       "      <td>0.311648</td>\n",
       "      <td>0.333233</td>\n",
       "      <td>0.296949</td>\n",
       "      <td>0.328498</td>\n",
       "      <td>0.058500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         0         1         2         3         4         5         6   \\\n",
       "0  0.045551  0.082303  0.441783  0.557767  0.464223  0.480648  0.484218   \n",
       "1  0.056158  0.104199  0.474926  0.580268  0.474175  0.498735  0.495115   \n",
       "2  0.091843  0.175325  0.514027  0.623756  0.540564  0.559322  0.556488   \n",
       "3  0.059998  0.118233  0.537488  0.624189  0.538297  0.558943  0.544088   \n",
       "4  0.044384  0.093917  0.538605  0.629057  0.536029  0.561725  0.546969   \n",
       "5  0.105419  0.217010  0.543570  0.650692  0.573192  0.589552  0.575902   \n",
       "6  0.129754  0.224380  0.563431  0.667568  0.602671  0.621300  0.623622   \n",
       "7  0.126099  0.268503  0.608118  0.698183  0.637944  0.651151  0.641658   \n",
       "8  0.081508  0.158971  0.625372  0.713436  0.636306  0.660764  0.652430   \n",
       "9  0.089210  0.187167  0.647592  0.716465  0.650920  0.662408  0.637901   \n",
       "\n",
       "         7         8         9   ...        18        19        20        21  \\\n",
       "0  0.076705  0.738926  0.608374  ...  0.410563  0.405630  0.470537  0.480826   \n",
       "1  0.095744  0.699700  0.613385  ...  0.416220  0.383511  0.460339  0.432448   \n",
       "2  0.153365  0.782845  0.648731  ...  0.409654  0.395657  0.465634  0.476696   \n",
       "3  0.102904  0.661974  0.660399  ...  0.415897  0.399450  0.472742  0.495575   \n",
       "4  0.081220  0.685998  0.655831  ...  0.425798  0.394038  0.463718  0.364012   \n",
       "5  0.185323  0.727102  0.655245  ...  0.402117  0.377224  0.459329  0.458997   \n",
       "6  0.186623  0.755068  0.663930  ...  0.403289  0.377821  0.455888  0.431858   \n",
       "7  0.218273  0.708333  0.647099  ...  0.397107  0.374731  0.453643  0.486726   \n",
       "8  0.127380  0.697260  0.655945  ...  0.404744  0.385279  0.461513  0.484956   \n",
       "9  0.150148  0.660473  0.643842  ...  0.412664  0.379760  0.462997  0.422419   \n",
       "\n",
       "         22        23        24        25        26        27  \n",
       "0  0.483917  0.460045  0.483088  0.214172  0.233993  0.160811  \n",
       "1  0.395775  0.343518  0.366370  0.216633  0.237930  0.158921  \n",
       "2  0.456314  0.409655  0.433357  0.218602  0.238590  0.064084  \n",
       "3  0.427053  0.429125  0.451290  0.261375  0.282716  0.066833  \n",
       "4  0.406977  0.422884  0.447327  0.273207  0.302760  0.059703  \n",
       "5  0.376878  0.418517  0.446109  0.263708  0.291853  0.059875  \n",
       "6  0.346515  0.420422  0.449264  0.283797  0.315984  0.057985  \n",
       "7  0.352237  0.419757  0.448894  0.286609  0.316765  0.059359  \n",
       "8  0.313497  0.381333  0.404965  0.317483  0.348372  0.061335  \n",
       "9  0.255414  0.311648  0.333233  0.296949  0.328498  0.058500  \n",
       "\n",
       "[10 rows x 28 columns]"
      ]
     },
     "execution_count": 737,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_ROSN_Final.head(10)"
   ]
  },
  {
   "attachments": {
    "image.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "id": "a8fd0115",
   "metadata": {},
   "source": [
    "![image.png](attachment:image.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 738,
   "id": "12aa5817",
   "metadata": {},
   "outputs": [],
   "source": [
    "y = df_ROSN_Final[5]\n",
    "X = df_ROSN_Final.drop(5, axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b317287",
   "metadata": {},
   "source": [
    "Ради практики и интереса будем обучать линейную модель через градиентный спуск. Зря что ли делали домашнее задание по ИАДУ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 739,
   "id": "9e2802a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import abc\n",
    "\n",
    "\n",
    "class BaseLoss(abc.ABC):\n",
    "    \"\"\"Базовый класс лосса\"\"\"\n",
    "\n",
    "    @abc.abstractmethod\n",
    "    def calc_loss(self, X: np.ndarray, y: np.ndarray, w: np.ndarray) -> float:\n",
    "        \"\"\"\n",
    "        Функция для вычислений значения лосса\n",
    "        :param X: np.ndarray размера (n_objects, n_features) с объектами датасета\n",
    "        :param y: np.ndarray размера (n_objects,) с правильными ответами\n",
    "        :param w: np.ndarray размера (n_features,) с весами линейной регрессии\n",
    "        :return: число -- значения функции потерь\n",
    "        \"\"\"\n",
    "        raise NotImplementedError\n",
    "\n",
    "    @abc.abstractmethod\n",
    "    def calc_grad(self, X: np.ndarray, y: np.ndarray, w: np.ndarray) -> np.ndarray:\n",
    "        \"\"\"\n",
    "        Функция для вычислений градиента лосса по весам w\n",
    "        :param X: np.ndarray размера (n_objects, n_features) с объектами датасета\n",
    "        :param y: np.ndarray размера (n_objects,) с правильными ответами\n",
    "        :param w: np.ndarray размера (n_features,) с весами линейной регрессии\n",
    "        :return: np.ndarray размера (n_features,) градиент функции потерь по весам w\n",
    "        \"\"\"\n",
    "        raise NotImplementedError"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7256d5f3",
   "metadata": {},
   "source": [
    "$$\n",
    "w^t = w^{t-1} - \\eta \\nabla_{w} Q(w^{t-1}, X, y)\n",
    "$$\n",
    "\n",
    "Где $w^t$ — значение вектора весов на $t$-ой итерации, а $\\eta$ — параметр learning rate, отвечающий за размер шага."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 740,
   "id": "b46ddf42",
   "metadata": {},
   "outputs": [],
   "source": [
    "class MSELoss(BaseLoss):\n",
    "    def calc_loss(self, X: np.ndarray, y: np.ndarray, w: np.ndarray) -> float:\n",
    "        \"\"\"\n",
    "        Функция для вычислений значения лосса\n",
    "        :param X: np.ndarray размера (n_objects, n_features) с объектами датасета\n",
    "        :param y: np.ndarray размера (n_objects,) с правильными ответами\n",
    "        :param w: np.ndarray размера (n_features,) с весами линейной регрессии\n",
    "        :return: число -- значения функции потерь\n",
    "        \"\"\"\n",
    "        Q = np.mean(np.square(X@w-y))\n",
    "        return Q\n",
    "\n",
    "    def calc_grad(self, X: np.ndarray, y: np.ndarray, w: np.ndarray) -> np.ndarray:\n",
    "        \"\"\"\n",
    "        Функция для вычислений градиента лосса по весам w\n",
    "        :param X: np.ndarray размера (n_objects, n_features) с объектами датасета\n",
    "        :param y: np.ndarray размера (n_objects,) с правильными ответами\n",
    "        :param w: np.ndarray размера (n_features,) с весами линейной регрессии\n",
    "        :return: np.ndarray размера (n_features,) градиент функции потерь по весам w\n",
    "        \"\"\"\n",
    "        grad = 2*np.transpose(X)@(X@w-y)/y.shape[0]\n",
    "        return grad"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6837ff52",
   "metadata": {},
   "source": [
    "$$\n",
    "Q(w, X, y) = \\frac{1}{\\ell} \\sum\\limits_{i=1}^\\ell (\\langle x_i, w \\rangle - y_i)^2\n",
    "$$\n",
    "\n",
    "где $x_i$ — это $i$-ый объект датасета, $y_i$ — правильный ответ для $i$-го объекта, а $w$ — веса нашей линейной модели.\n",
    "\n",
    "Для линейной модели, его можно записать в матричном виде вот так:\n",
    "\n",
    "$$\n",
    "Q(w, X, y) = \\frac{1}{\\ell} || Xw - y ||^2\n",
    "$$\n",
    "\n",
    "где $X$ — это матрица объекты-признаки, а $y$ — вектор правильных ответов\n",
    "\n",
    "Для того чтобы воспользоваться методом градиентного спуска, нам нужно посчитать градиент нашего функционала. Для MSE он будет выглядеть так:\n",
    "\n",
    "$$\n",
    "\\nabla_w Q(w, X, y) = \\frac{2}{\\ell} X^T(Xw-y)\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 741,
   "id": "d0597977",
   "metadata": {},
   "outputs": [],
   "source": [
    "def gradient_descent(\n",
    "    w_init: np.ndarray,\n",
    "    X: np.ndarray,\n",
    "    y: np.ndarray,\n",
    "    loss: BaseLoss,\n",
    "    lr: float,\n",
    "    n_iterations: int = 100000,\n",
    ") -> List[np.ndarray]:\n",
    "    \"\"\"\n",
    "    Функция градиентного спуска\n",
    "    :param w_init: np.ndarray размера (n_feratures,) -- начальное значение вектора весов\n",
    "    :param X: np.ndarray размера (n_objects, n_features) -- матрица объекты-признаки\n",
    "    :param y: np.ndarray размера (n_objects,) -- вектор правильных ответов\n",
    "    :param loss: Объект подкласса BaseLoss, который умеет считать градиенты при помощи loss.calc_grad(X, y, w)\n",
    "    :param lr: float -- параметр величины шага, на который нужно домножать градиент\n",
    "    :param n_iterations: int -- сколько итераций делать\n",
    "    :return: Список из n_iterations объектов np.ndarray размера (n_features,) -- история весов на каждом шаге\n",
    "    \"\"\"\n",
    "    w = np.zeros((n_iterations,w_init.shape[0]))\n",
    "    w[0] = w_init\n",
    "\n",
    "    for i in range(1,n_iterations):\n",
    "      w[i] = w[i-1]- lr*loss.calc_grad(X, y, w[i-1])\n",
    "    return w"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 742,
   "id": "1d7f8d60",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_1 = X[:int(2/3 * len(X))]\n",
    "y_train_1 = y[:int(2/3 * len(X))]\n",
    "X_test_1 = X[int(2/3 * len(X)):]\n",
    "y_test_1 = y[int(2/3 * len(X)):]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7e1f84e",
   "metadata": {},
   "source": [
    "Инициализируем вектор случайных весов."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 743,
   "id": "7447f4b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "w_init = np.random.uniform(-2, 2, (len(X.columns)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 744,
   "id": "a44f7f23",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Ошибка MSE после обучения: 0.039288538383446425\n"
     ]
    }
   ],
   "source": [
    "loss = MSELoss()\n",
    "w_list = gradient_descent(w_init, X_train_1, y_train_1, loss, 0.01, 10000)\n",
    "print(f' Ошибка MSE после обучения: {loss.calc_loss(X_test_1, y_test_1, w_list[-1])}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 745,
   "id": "94cd093d",
   "metadata": {},
   "outputs": [],
   "source": [
    "w_opt_1 = w_list[-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 746,
   "id": "f8cd8425",
   "metadata": {},
   "outputs": [],
   "source": [
    "third_index = int(1/3 * len(X))\n",
    "two_thirds_index = int(2/3 * len(X))\n",
    "\n",
    "X_train_2 = np.concatenate([X[:third_index], X[two_thirds_index:]])\n",
    "y_train_2 = np.concatenate([y[:third_index], y[two_thirds_index:]])\n",
    "\n",
    "X_test_2 = X[third_index:two_thirds_index]\n",
    "y_test_2 = y[third_index:two_thirds_index]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 747,
   "id": "ffe48f6b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Ошибка MSE после обучения: 0.02168717057999913\n"
     ]
    }
   ],
   "source": [
    "loss = MSELoss()\n",
    "w_list = gradient_descent(w_init, X_train_2, y_train_2, loss, 0.01, 10000)\n",
    "print(f' Ошибка MSE после обучения: {loss.calc_loss(X_test_2, y_test_2, w_list[-1])}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 748,
   "id": "8b64735a",
   "metadata": {},
   "outputs": [],
   "source": [
    "w_opt_2 = w_list[-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 749,
   "id": "dc6062b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_3 = X[int(1/3 * len(X)):]\n",
    "y_train_3 = y[int(1/3 * len(X)):]\n",
    "X_test_3 = X[:int(1/3 * len(X))]\n",
    "y_test_3 = y[:int(1/3 * len(X))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 750,
   "id": "43db1047",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Ошибка MSE после обучения: 0.07097325211360786\n"
     ]
    }
   ],
   "source": [
    "loss = MSELoss()\n",
    "w_list = gradient_descent(w_init, X_train_3, y_train_3, loss, 0.01, 10000)\n",
    "print(f' Ошибка MSE после обучения: {loss.calc_loss(X_test_3, y_test_3, w_list[-1])}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 751,
   "id": "a989a750",
   "metadata": {},
   "outputs": [],
   "source": [
    "w_opt_3 = w_list[-1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ad26177",
   "metadata": {},
   "source": [
    "Таким образом мы обучили три модели на кросс валидации, давайте возьмем в качестве итоговых весов, веса предсказанные второй моделью:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 752,
   "id": "7f4776fd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.28859926, -0.21140256, -0.55033924, -0.8990569 ,  0.83996616,\n",
       "        1.08629943,  0.31952755, -0.1128703 ,  2.1168183 , -1.67177131,\n",
       "       -0.36945153, -1.16879399, -1.35201291,  2.00602535,  0.82383182,\n",
       "        0.16777401, -1.05006315, -0.06654478,  1.00262403,  0.32364535,\n",
       "        0.40256887,  0.4626937 , -0.956033  ,  0.46319399, -0.03726817,\n",
       "       -0.05035109,  0.06715936])"
      ]
     },
     "execution_count": 752,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "w_opt_2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "309e7bf2",
   "metadata": {},
   "source": [
    "Можно, конечно еще добавть коэффициент регуляризации, так как в итоговых весах есть большие веса, что похоже немного на переобучение. Давайте добавим регуляризатор"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d69d592",
   "metadata": {},
   "source": [
    "Формула функции потерь для MSE с L2 регуляризацией выглядит так:\n",
    "$$\n",
    "Q(w, X, y) = \\frac{1}{\\ell} \\sum\\limits_{i=1}^\\ell (\\langle x_i, w \\rangle - y_i)^2 + \\lambda ||w||^2\n",
    "$$\n",
    "\n",
    "Или в матричном виде:\n",
    "\n",
    "$$\n",
    "Q(w, X, y) = \\frac{1}{\\ell} || Xw - y ||^2 + \\lambda ||w||^2\n",
    "$$\n",
    "\n",
    "Где $\\lambda$ — коэффициент регуляризации\n",
    "\n",
    "Градиент выглядит так:\n",
    "\n",
    "$$\n",
    "\\nabla_w Q(w, X, y) = \\frac{2}{\\ell} X^T(Xw-y) + 2 \\lambda w\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 753,
   "id": "69539a55",
   "metadata": {},
   "outputs": [],
   "source": [
    "class MSEL2Loss(BaseLoss):\n",
    "    def __init__(self, coef: float = 1.0):\n",
    "        \"\"\"\n",
    "        :param coef: коэффициент регуляризации (лямбда в формуле)\n",
    "        \"\"\"\n",
    "        self.coef = coef\n",
    "\n",
    "    def calc_loss(self, X: np.ndarray, y: np.ndarray, w: np.ndarray) -> float:\n",
    "        \"\"\"\n",
    "        Функция для вычислений значения лосса\n",
    "        :param X: np.ndarray размера (n_objects, n_features) с объектами датасета. Последний признак константный.\n",
    "        :param y: np.ndarray размера (n_objects,) с правильными ответами\n",
    "        :param w: np.ndarray размера (n_features,) с весами линейной регрессии. Последний вес -- bias.\n",
    "        :output: число -- значения функции потерь\n",
    "        \"\"\"\n",
    "        Q = np.mean(np.square(X@w-y)) + self.coef * np.sum(np.square(w))\n",
    "        return Q\n",
    "\n",
    "    def calc_grad(self, X: np.ndarray, y: np.ndarray, w: np.ndarray) -> np.ndarray:\n",
    "        \"\"\"\n",
    "        Функция для вычислений градиента лосса по весам w\n",
    "        :param X: np.ndarray размера (n_objects, n_features) с объектами датасета\n",
    "        :param y: np.ndarray размера (n_objects,) с правильными ответами\n",
    "        :param w: np.ndarray размера (n_features,) с весами линейной регрессии\n",
    "        :output: np.ndarray размера (n_features,) градиент функции потерь по весам w\n",
    "        \"\"\"\n",
    "        y_pred = X.dot(w)\n",
    "        grad = 2*np.transpose(X)@(y_pred-y)/y.shape[0]\n",
    "        grad[:-1] += 2 *self.coef*w[:-1]\n",
    "        return grad"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b401054",
   "metadata": {},
   "source": [
    "Будем подбирать коэффициент регуляризации по обучающей и тестовой выборке из первого блока кросс-валидации:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 754,
   "id": "f8912ca1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def train_models_and_plot_mse(X_train, y_train, X_test, y_test, coefs):\n",
    "    test_mse_values = []\n",
    "    train_mse_values = []\n",
    "\n",
    "    for coef in coefs:\n",
    "        mse_loss = MSEL2Loss(coef)\n",
    "        linear_regression = LinearRegression(fit_intercept=mse_loss)\n",
    "        linear_regression.fit(X_train, y_train)\n",
    "        y_train_pred = linear_regression.predict(X_train)\n",
    "        y_test_pred = linear_regression.predict(X_test)\n",
    "        train_mse = mse_loss.calc_loss(X_test, y_test, linear_regression.coef_)\n",
    "        train_mse_values.append(train_mse)\n",
    "        \n",
    "    plt.plot(coefs, train_mse_values, label='Train MSE')\n",
    "    plt.xlabel('$\\lambda$')\n",
    "    plt.ylabel('MSE')\n",
    "    plt.title('MSE в зависимости от гиперпараметра $\\lambda$')\n",
    "\n",
    "coefs = np.linspace(0, 0.01, 1000)\n",
    "train_models_and_plot_mse(X_train_1, y_train_1, X_test_1, y_test_1, coefs)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd215272",
   "metadata": {},
   "source": [
    "Таким образом, несмотря на вроде бы больше значение весов, оптимальный коэффициент регуляризации в данном случае равен нулю. Можно попробовать, конечно взять Ridge регуляризатор и проверить его. Давайте сделаем это. Не будем писать уже готовый класс, а воспользуемся готовой библиотекой:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 755,
   "id": "efb38496",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 2 candidates, totalling 10 fits\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, estimator=Ridge(), param_grid={'alpha': array([0.  , 0.05])},\n",
       "             scoring='neg_mean_squared_error', verbose=1)"
      ]
     },
     "execution_count": 755,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alphas = {'alpha': np.arange(0, 0.1, 0.05)}\n",
    "ridge_search = GridSearchCV(\n",
    "    estimator=Ridge(),\n",
    "    param_grid=alphas,\n",
    "    cv=5,\n",
    "    scoring='neg_mean_squared_error',\n",
    "    verbose=1)\n",
    "\n",
    "ridge_search.fit(X_test_1, y_test_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 756,
   "id": "da04d7a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'alpha': 0.0}"
      ]
     },
     "execution_count": 756,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ridge_search.best_params_"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40a4e7ad",
   "metadata": {},
   "source": [
    "Также ноль."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43dce716",
   "metadata": {},
   "source": [
    "# Оценка модели на реальных данных"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22335d95",
   "metadata": {},
   "source": [
    "Мы построили линейную модель, которую на самом деле можно оценить на новых данных, а именно наша выборка строилась с 01.01.2021 по 01.04.2024. Так как 1 апреля мы и начили парсить данные, однако теперь, в момент написания этой строчки на календаре 15 мая. А значит нам доступна информация о котировках Роснефти за период, насчитывающий 45 дней. Давайт спарсим эти данные и посчитаем теперь MSE на новой (тестовой) выборке. То есть на то, насколько наш прогноз, полученный при помощи модели будет релевантен по отношению к новым данным"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31f1dd77",
   "metadata": {},
   "source": [
    "Парсинг был проведен в отдельном документе, так как мы уже множество раз парсили, особенно на первом шаге и повторять один и тот же код - не имело смысла. Поэтому мы просто подгрузили полученные данные."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 757,
   "id": "20464a8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_ROSN_Train['IMOEX_CLOSE'] = df_IMOEX_Train['CLOSE']\n",
    "df_ROSN_Train['IMOEX_OPEN'] = df_IMOEX_Train['OPEN']\n",
    "df_ROSN_Train['BR_WAPRICE'] = df_BR_Train['WAPRICE']\n",
    "df_ROSN_Train['BR_CLOSE'] = df_BR_Train['CLOSE']\n",
    "df_ROSN_Train['BR_OPE'] = df_BR_Train['OPEN']\n",
    "df_ROSN_Train['BR_HIGH'] = df_BR_Train['HIGH']\n",
    "df_ROSN_Train['BR_LOW'] = df_BR_Train['LOW']\n",
    "df_ROSN_Train['SI_WAPRICE'] = df_SI_Train['WAPRICE']\n",
    "df_ROSN_Train['SI_CLOSE'] = df_SI_Train['CLOSE']\n",
    "df_ROSN_Train['SI_OPE'] = df_SI_Train['OPEN']\n",
    "df_ROSN_Train['SI_HIGH'] = df_SI_Train['HIGH']\n",
    "df_ROSN_Train['SI_LOW'] = df_SI_Train['LOW']\n",
    "columns_to_add = ['TRENDCLSPR', 'NUMTRADES', 'TradingVolume_RUB', 'TradingVolume_CONTR', 'OpenPositionsVolum_RUB', 'OpenPositionsVolum_CONTR', 'MarginRequirements']\n",
    "df_ROSN_Final_Train = df_ROSN_Train.merge(df_BR_Train[columns_to_add], left_index=True, right_index=True, how='left')\n",
    "df_ROSN_Final_Train = df_ROSN_Train.merge(df_SI_Train[columns_to_add], left_index=True, right_index=True, how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 760,
   "id": "5dae4c67",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_ROSN_Final_Train.drop(['BOARDID', 'SECID'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 761,
   "id": "de159146",
   "metadata": {},
   "outputs": [],
   "source": [
    "m = np.max(df_ROSN_Final_Train['WAPRICE'])\n",
    "s = np.min(df_ROSN_Final_Train['WAPRICE'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 778,
   "id": "98f9b463",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "18.899999999999977"
      ]
     },
     "execution_count": 778,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m-s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 762,
   "id": "b98776d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "normalizer = preprocessing.MinMaxScaler()\n",
    "df_ROSN_Final_Train.columns = df_ROSN_Final_Train.columns.astype(str)\n",
    "df_ROSN_Final_real_norm_np = normalizer.fit_transform(df_ROSN_Final_Train)\n",
    "df_ROSN_Final_Train = pd.DataFrame(data=df_ROSN_Final_real_norm_np)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 763,
   "id": "bc0ccd54",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_ROSN_Final_Train.dropna(inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 767,
   "id": "0cacf636",
   "metadata": {},
   "outputs": [],
   "source": [
    "y = df_ROSN_Final_Train[5]\n",
    "X = df_ROSN_Final_Train.drop(5, axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 768,
   "id": "056b07be",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Ошибка MSE после обучения: 0.21727924376646798\n"
     ]
    }
   ],
   "source": [
    "print(f' Ошибка MSE после обучения: {loss.calc_loss(X, y, w_opt_2)}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1bc9f57",
   "metadata": {},
   "source": [
    "Перейдем обратно от нормализанной величины к рублям: Среднеквадратичная ошибка (MSE) измеряет средний квадрат разности между предсказанными значениями и фактическими значениями. Когда данные нормализованы, MSE рассчитывается на этих уменьшенных разностях, что делает значение MSE меньше, пропорционально квадрату масштаба данных.\n",
    "\n",
    "Чтобы восстановить MSE к исходным размерностям, необходимо умножить его на квадрат масштабного коэффициента, который в данном случае равен квадрату размаха данных. Это корректирует MSE, учитывая, что различия между данными были искусственно сжаты при нормализации. Причина, по которой мы не прибавляем при корректировке MSE для возврата к исходным размерам после Min-max нормализации, заключается в том, что Min-max нормализация и её обратная операция влияют только на масштаб и сдвиг данных, а не на расстояние между точками."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 774,
   "id": "02918fca",
   "metadata": {},
   "outputs": [],
   "source": [
    "z = ((loss.calc_loss(X, y, w_opt_1))*(m-s)**2)\n",
    "z = z**0.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 775,
   "id": "837c4cb2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9.24858156596925"
      ]
     },
     "execution_count": 775,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06ad34c9",
   "metadata": {},
   "source": [
    "Таким образом, построенная модель за последний месяц 01.04.2024-13.05.2024 ошибалась в среднем на 9 рублей в прогнозе акций компании Роснефти"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 779,
   "id": "9e0db47a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dates = X.index\n",
    "\n",
    "plt.figure(figsize=(10, 5))\n",
    "plt.plot(dates,X@w_opt_1, \"r\", label=\"prediction\")\n",
    "plt.plot(dates, y, label=\"actual\")\n",
    "plt.grid(True)\n",
    "plt.legend(loc=\"best\")\n",
    "plt.title(f\"Ошибка {z} рублей\");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16a295f2",
   "metadata": {},
   "source": [
    "\"Шоков не было, всё идёт пока что по тренду. Апрель 2024 года оказался спокойным, поэтому прогнозы остаются хорошими.\""
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
